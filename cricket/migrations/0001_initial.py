# Generated by Django 3.2.21 on 2023-12-05 17:43

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('end_status', models.BooleanField(default=False)),
                ('game_type', models.CharField(max_length=5, null=True)),
                ('inning', models.IntegerField(default=1)),
                ('over', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Players',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first', models.CharField(max_length=64)),
                ('last', models.CharField(max_length=64)),
                ('type', models.CharField(max_length=2)),
                ('matches', models.IntegerField(default=0)),
                ('runs', models.IntegerField(default=0)),
                ('highest_score', models.IntegerField(default=0)),
                ('highest_wicket', models.IntegerField(default=0)),
                ('wickets', models.IntegerField(default=0)),
                ('bowls', models.IntegerField(default=0)),
                ('given_runs', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='images/')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TeamsPlaying',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batting_status', models.BooleanField(default=False)),
                ('score', models.IntegerField(default=0)),
                ('wickets_down', models.IntegerField(default=0)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teamsplaying', to='cricket.game')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cricket.team')),
            ],
        ),
        migrations.CreateModel(
            name='Playing',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first', models.CharField(max_length=64, null=True)),
                ('last', models.CharField(max_length=64, null=True)),
                ('bat_status', models.BooleanField(default=False)),
                ('on_strike', models.BooleanField(default=False)),
                ('out', models.BooleanField(default=False)),
                ('current_bowling', models.BooleanField(default=False)),
                ('runs', models.IntegerField(default=0)),
                ('bowls', models.IntegerField(default=0)),
                ('wickets', models.IntegerField(default=0)),
                ('runs_given', models.IntegerField(default=0)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='cricket.game')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player', to='cricket.players')),
                ('team', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='playing', to='cricket.team')),
            ],
        ),
        migrations.AddField(
            model_name='players',
            name='team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='cricket.team'),
        ),
        migrations.AddField(
            model_name='game',
            name='teams',
            field=models.ManyToManyField(blank=True, related_name='games', to='cricket.Team'),
        ),
        migrations.AddField(
            model_name='game',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Bowls',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bowl_type', models.CharField(choices=[('valid', 'Valid'), ('wide', 'Wide'), ('noball', 'No ball')], default='valid', max_length=10)),
                ('bat_type', models.CharField(choices=[('6', 'Six'), ('4', 'Four'), ('1', 'One'), ('2', 'Two'), ('3', 'Three'), ('.', 'Dot'), ('out', 'Out')], default='.', max_length=10)),
                ('inning', models.IntegerField(default=1)),
                ('over', models.IntegerField(default=1)),
                ('batsman', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bowls_faced', to='cricket.playing')),
                ('bowler', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bowls_bowled', to='cricket.playing')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bowls', to='cricket.game')),
            ],
        ),
    ]
